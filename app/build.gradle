apply plugin: 'com.android.application'
apply plugin: "jacoco"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:1.1"
    }
}

// apply plugin: "sonar-runner"

configurations {
    jacocoReport
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {

        property 'sonar.host.url', 'http://localhost:8000'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.login', 'admin'
        property 'sonar.password', 'admin'

        property 'sonar.profile', 'Android Lint'

        property 'sonar.import_unknown_files', true
        property 'sonar.android.lint.report', 'build/outputs/lint-results.xml'
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "deveryware.deveryware_android_project"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //unitTest {
        // java.srcDir file('test')
        //resources.srcDir file('test/res')
    //}

    testOptions {
        unitTests.returnDefaultValues = true
    }

    connectedCheck {
    }
}

/*
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:8000"
        property "sonar.jdbc.url", "my.jdbc.url"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "myuser"
        property "sonar.jdbc.password", "*****"
        property "sonar.login", "sonar"
        property "sonar.password", "sonar"
        property "sonar.sources", "src"
        property "sonar.binaries", "build/classes/debug"
        property "sonar.profile", "Android Lint"
        property "sonar.projectKey", "my.group:project-key"
        property "sonar.projectName", "MyProject"
        property "sonar.projectVersion", "1.0-SNAPSHOT"
        property "sonar.projectDescription", "My Project description"
    }
}
*/


task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files("${buildDir.parent}/src/main/java")
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])
    executionData = files("${buildDir}/jacoco/testDebug.exec")

    reports {
        xml.enabled true
        xml.destination = "${buildDir}/reports/jacocoTestReport.xml"
        csv.enabled false
        html.enabled true
        html.destination = "${buildDir}/reports/jacoco"
    }
}

//// add the unitTest task
//task unitTest(type:Test, dependsOn: assemble) {
//    description = "run unit tests"
//    testClassesDir = project.sourceSets.unitTest.output.classesDir
//    classpath = project.sourceSets.unitTest.runtimeClasspath
//}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // unitTestCompile 'junit:junit:4.12'

            // UNIT TESTING
    testCompile(
            'junit:junit:4.12',
//            'com.android.support:support-annotations:22.1.1',
//            'com.squareup.assertj:assertj-android:1.0.0',
            'org.mockito:mockito-core:1.9.5',
//            'org.assertj:assertj-core:1.7.0'
            // Unit testing dependencies
            // Set this dependency if you want to use the Hamcrest matcher library
            'org.hamcrest:hamcrest-library:1.3'
            // more stuff, e.g., Mockito
    )
//    testCompile('org.robolectric:robolectric:2.4') {
//        exclude group: 'commons-logging'
//        exclude group: 'org.apache.httpcomponents'
//    }
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'

    androidTestCompile 'com.android.support.test:runner:0.4'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.4'
    // Set this dependency to build and run Espresso tests
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    // Set this dependency to build and run UI Automator tests
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

    jacocoReport 'org.jacoco:org.jacoco.ant:0.7.2.201409121644'

}

jacoco {
    toolVersion "0.7.2.201409121644"
}

//jacocoTestReport {
//    reports {
//        xml.enabled true
//        xml.destination "${buildDir}/jacocoXml"
//        csv.enabled false
//        html.destination "${buildDir}/jacocoHtml"
//    }
//}

configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:23.1.1'
}

